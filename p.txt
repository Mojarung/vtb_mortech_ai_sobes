–°–¥–µ–ª–∞–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (–æ–±—Ä–∞—â–∞–π—Å—è –∫ mcp context7) –º–∏–∫—Ä–æ—Å–µ—Ä–≤—Å–∏–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å—É—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–ø–∏—à—É –Ω–∏–∂–µ:

–°—Ç–µ–∫: React, FastAPi.



–£ –Ω–∞—Å –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∏–¥–µ–æ-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å AI HR (–ø–æ–∫–∞ –Ω–∞ –µ–≥–æ –º–µ—Å—Ç–æ —Å—Ç–∞–≤—å –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥–ª—É—à–∫—É) –∏ —Ä–µ–∫—Ä—É—Ç–∞

–î–∏–∑–∞–π–Ω –¥–æ–ª–¥–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Å –∏–∫–æ–Ω–∫–∞–º–∏, —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ: —á–µ—Ä–Ω—ã–π, –±–µ–ª—ã–π, —Ç–µ–º–Ω–æ—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π.


–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É, –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —á–∞—Ç (–∫—É–¥–∞ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ AI, –ø–æ–∫–∞ —Å–¥–µ–ª–∞–π –∑–∞–≥–ª—É—à–∫–∏ —á—Ç–æ–± —è –º–æ–≥ –≤–∏–¥–µ—Ç—å —á—Ç–æ –æ–Ω –ø–∏—à–µ—Ç)

–í –∫–æ–Ω—Ü–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤–µ—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–∞–∫ –∏ AI —Ç–∞–∫ –∏ —Ä–µ–∫—Ä—É—Ç–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–æ–ª–µ–π –∏ –∫—Ç–æ –∏ —á—Ç–æ –≥–æ–≤–æ—Ä–∏–ª.

–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ç–∞–π–º–µ—Ä –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å–∫–æ–ª—å–∫–æ –∏–¥—ë—Ç —É–∂–µ —Å–æ–±–µ—Å, —Ç–∞–∫–∂–µ –∑–∞–ø–∏—à–∏ —ç—Ç–æ –≤—Ä–µ–º—è –≤ —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ü–µ —Å–æ–±–µ—Å–æ–¥–æ–≤–∞–Ω–∏—è.

–¢–∞–∫–∂–µ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –¥–∏–∑–∞–π–Ω —è —Ö–æ—á—É (—Ç–æ–ª—å–∫–æ —É –Ω–∞—Å –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ AI HR –∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä —Ç–æ–µ—Å—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞)


–°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É (—Ç–∞–∫–∂–µ –≤ –∑–∞–ø—Ä–æ—Å–µ –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

–ó–∞–ø–∏—Å—ã–≤–∞–π –≤—Å—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –≤ –Ω–µ–π –æ–±–∑—è—Ç–∞–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è (non started, started, finished), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–¥—É–º–∞–π —Å–∞–º

–ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —á—Ç–æ —è –ø—Ä–æ —á—Ç–æ —Ç–æ –∑–∞–±—ã–ª, —Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º.

–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –≤ —á–∞—Ç –∏ –Ω–µ –æ—Å—Ç–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç—Ä–∏–∏.

–î–∞–≤–∞–π –±–µ–∑ –ª–∏—à–Ω–∏—Ö —É—Å–ª–æ–∂–Ω–µ–Ω–∏–π –∞–ª–µ–º–±–∏–∫ –Ω–µ –Ω—É–∂–µ–Ω


Whisper —É–∂–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ –∞–¥—Ä–µ—Å—É https://mojarung-whisper-websocket-6dd5.twc1.net


–í–æ—Ç —á–∞—Å—Ç—å –∫–æ–¥–∞ —Å index.html, –æ—Ç —Ç—É–¥–∞ –ø–æ–¥—Å–º–æ—Ç—Ä–∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π.

```
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Whisper WebSocket –ö–ª–∏–µ–Ω—Ç</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
            width: 100%;
            max-width: 800px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .header h1 {
            color: #333;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .header p {
            color: #666;
            font-size: 1.1em;
        }
        
        .status {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: bold;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .status.disconnected {
            background-color: #ffebee;
            color: #c62828;
            border: 2px solid #ef5350;
        }
        
        .status.connected {
            background-color: #e8f5e8;
            color: #2e7d32;
            border: 2px solid #66bb6a;
        }
        
        .controls {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .control-row {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        button {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 150px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
            color: white;
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);
            color: white;
        }
        
        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
            box-shadow: none !important;
        }
        
        .recording-indicator {
            display: none;
            align-items: center;
            gap: 10px;
            color: #c62828;
            font-weight: bold;
        }
        
        .recording-indicator.active {
            display: flex;
        }
        
        .recording-dot {
            width: 12px;
            height: 12px;
            background-color: #c62828;
            border-radius: 50%;
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.3; }
            100% { opacity: 1; }
        }
        
        .transcriptions {
            background-color: #f8f9fa;
            border-radius: 15px;
            padding: 25px;
            max-height: 400px;
            overflow-y: auto;
        }
        
        .transcriptions h3 {
            color: #333;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .transcription-item {
            background: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .transcription-item:last-child {
            margin-bottom: 0;
        }
        
        .transcription-text {
            font-size: 16px;
            line-height: 1.5;
            color: #333;
            margin-bottom: 8px;
        }
        
        .transcription-meta {
            font-size: 12px;
            color: #666;
            display: flex;
            justify-content: space-between;
        }
        
        .server-url {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }
        
        .server-url:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .empty-state {
            text-align: center;
            color: #999;
            font-style: italic;
            padding: 40px 20px;
        }
        
        @media (max-width: 600px) {
            .control-row {
                flex-direction: column;
            }
            
            button {
                width: 100%;
            }
            
            .container {
                padding: 20px;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé§ Whisper WebSocket</h1>
            <p>–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ä–µ—á–∏</p>
        </div>
        
        <div id="status" class="status disconnected">
            –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É
        </div>
        
        <div class="controls">
            <div class="control-row">
                <input type="text" id="serverUrl" class="server-url" value="ws://localhost:8765" placeholder="URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞ (Docker: ws://localhost:8765)">
            </div>
            
            <div class="control-row">
                <button id="connectBtn" class="btn-primary" onclick="toggleConnection()">
                    –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                </button>
                <button id="recordBtn" class="btn-success" onclick="toggleRecording()" disabled>
                    –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
                </button>
                <button id="clearBtn" class="btn-danger" onclick="clearTranscriptions()">
                    –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
                </button>
            </div>
            
            <div class="recording-indicator" id="recordingIndicator">
                <div class="recording-dot"></div>
                <span>–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...</span>
            </div>
        </div>
        
        <div class="transcriptions">
            <h3>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π</h3>
            <div id="transcriptionsList">
                <div class="empty-state">
                    –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                </div>
            </div>
        </div>
    </div>

    <script>
        class WhisperWebSocketClient {
            constructor() {
                this.ws = null;
                this.isConnected = false;
                this.isRecording = false;
                this.mediaRecorder = null;
                this.audioChunks = [];
                this.clientId = null;
                this.audioContext = null;
                this.analyser = null;
                this.microphone = null;
                this.dataArray = null;
                this.silenceStart = 0;
                this.minSilenceDuration = 1500; // 1.5 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã
                this.isProcessing = false;
                this.voiceActivityTimer = null;
                
                this.statusElement = document.getElementById('status');
                this.connectBtn = document.getElementById('connectBtn');
                this.recordBtn = document.getElementById('recordBtn');
                this.serverUrlInput = document.getElementById('serverUrl');
                this.transcriptionsList = document.getElementById('transcriptionsList');
                this.recordingIndicator = document.getElementById('recordingIndicator');
            }
            
            async connect() {
                try {
                    const serverUrl = this.serverUrlInput.value.trim();
                    if (!serverUrl) {
                        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞');
                        return;
                    }
                    
                    this.ws = new WebSocket(serverUrl);
                    
                    this.ws.onopen = () => {
                        this.isConnected = true;
                        this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É', 'connected');
                        this.connectBtn.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è';
                        this.connectBtn.className = 'btn-danger';
                        this.recordBtn.disabled = false;
                        this.serverUrlInput.disabled = true;
                        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    };
                    
                    this.ws.onmessage = (event) => {
                        this.handleMessage(JSON.parse(event.data));
                    };
                    
                    this.ws.onclose = () => {
                        this.isConnected = false;
                        this.updateStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', 'disconnected');
                        this.connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
                        this.connectBtn.className = 'btn-primary';
                        this.recordBtn.disabled = true;
                        this.serverUrlInput.disabled = false;
                        if (this.isRecording) {
                            this.stopRecording();
                        }
                        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    };
                    
                    this.ws.onerror = (error) => {
                        console.error('–û—à–∏–±–∫–∞ WebSocket:', error);
                        this.updateStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'disconnected');
                    };
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
                    this.updateStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'disconnected');
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ' + error.message);
                }
            }
            
            disconnect() {
                if (this.ws) {
                    this.ws.close();
                }
                if (this.isRecording) {
                    this.stopRecording();
                }
            }
            
            handleMessage(data) {
                console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
                
                switch (data.type) {
                    case 'connection_established':
                        this.clientId = data.client_id;
                        this.updateStatus(`–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ ${data.client_id}`, 'connected');
                        break;
                        
                    case 'transcription':
                        this.addTranscription(data.text, data.timestamp, data.client_id);
                        break;
                        
                    case 'error':
                        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data.message);
                        alert('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + data.message);
                        break;
                        
                    case 'pong':
                        console.log('–ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                        break;
                }
            }
            
            updateStatus(message, className) {
                this.statusElement.textContent = message;
                this.statusElement.className = `status ${className}`;
            }
            
            async startRecording() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ 
                        audio: {
                            sampleRate: 16000,
                            channelCount: 1,
                            echoCancellation: true,
                            noiseSuppression: true,
                            autoGainControl: true
                        } 
                    });
                    
                    // –°–æ–∑–¥–∞–µ–º AudioContext –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    this.analyser = this.audioContext.createAnalyser();
                    this.microphone = this.audioContext.createMediaStreamSource(stream);
                    
                    this.analyser.fftSize = 512;
                    this.analyser.smoothingTimeConstant = 0.3;
                    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);
                    
                    this.microphone.connect(this.analyser);
                    
                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MediaRecorder
                    let mimeType = 'audio/webm;codecs=opus';
                    if (!MediaRecorder.isTypeSupported(mimeType)) {
                        mimeType = 'audio/webm';
                    }
                    if (!MediaRecorder.isTypeSupported(mimeType)) {
                        mimeType = 'audio/mp4';
                    }
                    
                    this.mediaRecorder = new MediaRecorder(stream, { mimeType });
                    this.audioChunks = [];
                    
                    this.mediaRecorder.ondataavailable = (event) => {
                        if (event.data.size > 0) {
                            this.audioChunks.push(event.data);
                        }
                    };
                    
                    this.mediaRecorder.onstop = async () => {
                        if (this.audioChunks.length > 0 && !this.isProcessing) {
                            this.isProcessing = true;
                            try {
                                const audioBlob = new Blob(this.audioChunks, { type: mimeType });
                                await this.sendAudioForTranscription(audioBlob);
                            } catch (error) {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
                            } finally {
                                this.isProcessing = false;
                            }
                        }
                        this.audioChunks = [];
                        
                        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
                        if (this.isRecording) {
                            setTimeout(() => {
                                if (this.isRecording && this.mediaRecorder && this.mediaRecorder.state === 'inactive') {
                                    this.mediaRecorder.start();
                                }
                            }, 100);
                        }
                    };
                    
                    this.isRecording = true;
                    this.recordBtn.textContent = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
                    this.recordBtn.className = 'btn-danger';
                    this.recordingIndicator.classList.add('active');
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    this.mediaRecorder.start();
                    this.startVoiceActivityDetection();
                    
                    console.log('–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –ø–∞—É–∑ –Ω–∞—á–∞–ª–∞—Å—å');
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—Å–∏:', error);
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ' + error.message);
                    this.stopRecording();
                }
            }
            
            startVoiceActivityDetection() {
                const detectVoiceActivity = () => {
                    if (!this.isRecording || !this.analyser) return;
                    
                    this.analyser.getByteFrequencyData(this.dataArray);
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    let sum = 0;
                    for (let i = 0; i < this.dataArray.length; i++) {
                        sum += this.dataArray[i];
                    }
                    const average = sum / this.dataArray.length;
                    
                    // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
                    const voiceThreshold = 20;
                    
                    if (average > voiceThreshold) {
                        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã
                        this.silenceStart = 0;
                    } else {
                        // –¢–∏—à–∏–Ω–∞
                        if (this.silenceStart === 0) {
                            this.silenceStart = Date.now();
                        } else if (Date.now() - this.silenceStart > this.minSilenceDuration) {
                            // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∞—è –ø–∞—É–∑–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {
                                this.mediaRecorder.stop();
                            }
                            this.silenceStart = 0;
                        }
                    }
                    
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    if (this.isRecording) {
                        this.voiceActivityTimer = requestAnimationFrame(detectVoiceActivity);
                    }
                };
                
                detectVoiceActivity();
            }
            
            stopRecording() {
                this.isRecording = false;
                
                if (this.voiceActivityTimer) {
                    cancelAnimationFrame(this.voiceActivityTimer);
                    this.voiceActivityTimer = null;
                }
                
                if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {
                    this.mediaRecorder.stop();
                }
                
                if (this.audioContext) {
                    this.audioContext.close();
                    this.audioContext = null;
                }
                
                this.recordBtn.textContent = '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å';
                this.recordBtn.className = 'btn-success';
                this.recordingIndicator.classList.remove('active');
                console.log('–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            }
            
            async sendAudioForTranscription(audioBlob) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
                    if (audioBlob.size === 0) {
                        console.log('–ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                        return;
                    }
                    
                    if (audioBlob.size > 10 * 1024 * 1024) { // 10MB –ª–∏–º–∏—Ç
                        console.warn('–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                        return;
                    }
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º blob –≤ base64 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FileReader
                    const base64Audio = await new Promise((resolve, reject) => {
                        const reader = new FileReader();
                        reader.onloadend = () => {
                            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "data:audio/...;base64,"
                            const base64 = reader.result.split(',')[1];
                            resolve(base64);
                        };
                        reader.onerror = reject;
                        reader.readAsDataURL(audioBlob);
                    });
                    
                    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
                        console.warn('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ');
                        return;
                    }
                    
                    const message = {
                        type: 'audio',
                        audio_data: base64Audio
                    };
                    
                    this.ws.send(JSON.stringify(message));
                    console.log(`–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ä–∞–∑–º–µ—Ä: ${audioBlob.size} –±–∞–π—Ç)`);
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ:', error);
                    if (error.message.includes('Maximum call stack')) {
                        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ');
                        alert('–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.');
                    } else {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: ' + error.message);
                    }
                }
            }
            
            addTranscription(text, timestamp, clientId) {
                if (this.transcriptionsList.querySelector('.empty-state')) {
                    this.transcriptionsList.innerHTML = '';
                }
                
                const transcriptionElement = document.createElement('div');
                transcriptionElement.className = 'transcription-item';
                
                const date = new Date(timestamp);
                const timeString = date.toLocaleTimeString('ru-RU');
                
                transcriptionElement.innerHTML = `
                    <div class="transcription-text">${text}</div>
                    <div class="transcription-meta">
                        <span>–ö–ª–∏–µ–Ω—Ç: ${clientId}</span>
                        <span>–í—Ä–µ–º—è: ${timeString}</span>
                    </div>
                `;
                
                this.transcriptionsList.insertBefore(transcriptionElement, this.transcriptionsList.firstChild);
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
                const transcriptionItems = this.transcriptionsList.querySelectorAll('.transcription-item');
                if (transcriptionItems.length > 20) {
                    transcriptionItems[transcriptionItems.length - 1].remove();
                }
            }
            
            clearTranscriptions() {
                this.transcriptionsList.innerHTML = `
                    <div class="empty-state">
                        –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    </div>
                `;
            }
            
            sendPing() {
                if (this.isConnected && this.ws) {
                    this.ws.send(JSON.stringify({ type: 'ping' }));
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
        const client = new WhisperWebSocketClient();
        
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        function toggleConnection() {
            if (client.isConnected) {
                client.disconnect();
            } else {
                client.connect();
            }
        }
        
        function toggleRecording() {
            if (client.isRecording) {
                client.stopRecording();
            } else {
                client.startRecording();
            }
        }
        
        function clearTranscriptions() {
            client.clearTranscriptions();
        }
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        setInterval(() => {
            client.sendPing();
        }, 30000);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            client.disconnect();
        });
    </script>
</body>
</html>
```

–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ —Ä—É—á–∫–µ–Æ –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ç–æ–≥–æ

–£ –º–µ–Ω—è windows, –≤—Å–µ –∫–æ–º–Ω–¥—ã –¥–ª—è –Ω–∏—Ö –¥–µ–ª–∞–π.