import { useState, useRef, useCallback, useEffect } from 'react'

interface TranscriptionResult {
  text: string
  timestamp: string
  client_id: string
}

type ConnectionStatus = 'disconnected' | 'connecting' | 'connected' | 'error'

interface UseWhisperWebSocketReturn {
  connectionStatus: ConnectionStatus
  isRecording: boolean
  transcriptions: TranscriptionResult[]
  connect: () => Promise<void>
  disconnect: () => void
  startRecording: () => Promise<void>
  stopRecording: () => void
  clearTranscriptions: () => void
  error: string | null
}

const useWhisperWebSocket = (serverUrl: string = 'wss://mojarung-whisper-websocket-6dd5.twc1.net'): UseWhisperWebSocketReturn => {
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('disconnected')
  const [isRecording, setIsRecording] = useState(false)
  const [transcriptions, setTranscriptions] = useState<TranscriptionResult[]>([])
  const [error, setError] = useState<string | null>(null)

  console.log('üé§ [WHISPER] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useWhisperWebSocket —Ö—É–∫–∞')
  console.log('üé§ [WHISPER] ‚îú‚îÄ –°–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', serverUrl)
  console.log('üé§ [WHISPER] ‚îú‚îÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã:', 1500, '–º—Å')
  console.log('üé§ [WHISPER] ‚îî‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: 10MB')

  const wsRef = useRef<WebSocket | null>(null)
  const mediaRecorderRef = useRef<MediaRecorder | null>(null)
  const audioContextRef = useRef<AudioContext | null>(null)
  const analyserRef = useRef<AnalyserNode | null>(null)
  const microphoneRef = useRef<MediaStreamAudioSourceNode | null>(null)
  const streamRef = useRef<MediaStream | null>(null)
  const audioChunksRef = useRef<Blob[]>([])
  const clientIdRef = useRef<string | null>(null)
  const isProcessingRef = useRef(false)
  const silenceStartRef = useRef(0)
  const voiceActivityTimerRef = useRef<number | null>(null)

  const minSilenceDuration = 1500 // 1.5 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã

  const connect = useCallback(async () => {
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      return
    }

    try {
      setConnectionStatus('connecting')
      setError(null)

      wsRef.current = new WebSocket(serverUrl)

      wsRef.current.onopen = () => {
        setConnectionStatus('connected')
        console.log('üé§ [WHISPER] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        console.log('üé§ [WHISPER] –°–µ—Ä–≤–µ—Ä:', serverUrl)
      }

      wsRef.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data)
          console.log('üé§ [WHISPER] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data)
          
          switch (data.type) {
            case 'connection_established':
              clientIdRef.current = data.client_id
              console.log(`üé§ [WHISPER] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç: ${data.client_id}`)
              console.log(`üé§ [WHISPER] –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∞—É–¥–∏–æ`)
              break
              
            case 'transcription':
              console.log('üé§ [WHISPER] üìù –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ê:')
              console.log(`üé§ [WHISPER] ‚îú‚îÄ –¢–µ–∫—Å—Ç: "${data.text}"`)
              console.log(`üé§ [WHISPER] ‚îú‚îÄ –ö–ª–∏–µ–Ω—Ç: ${data.client_id}`)
              console.log(`üé§ [WHISPER] ‚îî‚îÄ –í—Ä–µ–º—è: ${new Date(data.timestamp).toLocaleTimeString()}`)
              
              setTranscriptions(prev => {
                const newTranscription = {
                  text: data.text,
                  timestamp: data.timestamp,
                  client_id: data.client_id
                }
                console.log('üé§ [WHISPER] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –≤—Å–µ–≥–æ:', prev.length + 1)
                return [newTranscription, ...prev]
              })
              break
              
            case 'error':
              setError(data.message)
              console.error('üé§ [WHISPER] ‚ùå –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê:', data.message)
              console.error('üé§ [WHISPER] –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', data)
              break
              
            case 'pong':
              console.log('üé§ [WHISPER] üèì –ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ')
              break
              
            default:
              console.log('üé§ [WHISPER] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type)
              console.log('üé§ [WHISPER] –î–∞–Ω–Ω—ã–µ:', data)
          }
        } catch (err) {
          console.error('üé§ [WHISPER] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err)
          console.error('üé§ [WHISPER] –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', event.data)
        }
      }

      wsRef.current.onclose = (event) => {
        setConnectionStatus('disconnected')
        console.log('üé§ [WHISPER] üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
        console.log('üé§ [WHISPER] –ö–æ–¥:', event.code, '–ü—Ä–∏—á–∏–Ω–∞:', event.reason)
        if (isRecording) {
          console.log('üé§ [WHISPER] ‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑-–∑–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
          stopRecording()
        }
      }

      wsRef.current.onerror = (error) => {
        console.error('üé§ [WHISPER] ‚ùå –û—à–∏–±–∫–∞ WebSocket:', error)
        console.error('üé§ [WHISPER] –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', wsRef.current?.readyState)
        setConnectionStatus('error')
        setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Whisper:', err)
      setConnectionStatus('error')
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
    }
  }, [serverUrl])

  const disconnect = useCallback(() => {
    if (isRecording) {
      stopRecording()
    }

    if (wsRef.current) {
      wsRef.current.close()
      wsRef.current = null
    }

    setConnectionStatus('disconnected')
    clientIdRef.current = null
  }, [])

  const sendAudioForTranscription = useCallback(async (audioBlob: Blob) => {
    if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {
      console.warn('üé§ [WHISPER] ‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ')
      console.warn('üé§ [WHISPER] –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', wsRef.current?.readyState)
      return
    }

    try {
      console.log('üé§ [WHISPER] üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...')
      console.log('üé§ [WHISPER] ‚îú‚îÄ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', audioBlob.size, '–±–∞–π—Ç')
      console.log('üé§ [WHISPER] ‚îú‚îÄ –¢–∏–ø:', audioBlob.type)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
      if (audioBlob.size === 0) {
        console.warn('üé§ [WHISPER] ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
        return
      }
      
      if (audioBlob.size > 10 * 1024 * 1024) {
        console.warn('üé§ [WHISPER] ‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>10MB), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
        return
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      console.log('üé§ [WHISPER] üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64...')
      const startTime = performance.now()
      
      const base64Audio = await new Promise<string>((resolve, reject) => {
        const reader = new FileReader()
        reader.onloadend = () => {
          const result = reader.result as string
          const base64 = result.split(',')[1]
          resolve(base64)
        }
        reader.onerror = reject
        reader.readAsDataURL(audioBlob)
      })
      
      const conversionTime = performance.now() - startTime
      console.log('üé§ [WHISPER] ‚úÖ Base64 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞', conversionTime.toFixed(1), '–º—Å')
      console.log('üé§ [WHISPER] ‚îú‚îÄ –†–∞–∑–º–µ—Ä base64:', base64Audio.length, '—Å–∏–º–≤–æ–ª–æ–≤')

      const message = {
        type: 'audio',
        audio_data: base64Audio
      }

      console.log('üé§ [WHISPER] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...')
      wsRef.current.send(JSON.stringify(message))
      console.log('üé§ [WHISPER] ‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Whisper —Å–µ—Ä–≤–µ—Ä')
      console.log('üé§ [WHISPER] ‚îú‚îÄ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä:', audioBlob.size, '–±–∞–π—Ç')
      console.log('üé§ [WHISPER] ‚îî‚îÄ –†–∞–∑–º–µ—Ä JSON:', JSON.stringify(message).length, '—Å–∏–º–≤–æ–ª–æ–≤')

    } catch (error) {
      console.error('üé§ [WHISPER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ:', error)
      console.error('üé§ [WHISPER] –î–µ—Ç–∞–ª–∏ blob:', {
        size: audioBlob.size,
        type: audioBlob.type
      })
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
    }
  }, [])

  const startVoiceActivityDetection = useCallback(() => {
    if (!analyserRef.current) {
      console.error('üé§ [WHISPER] ‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—É–¥–∏–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return
    }

    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount)
    let lastVoiceLog = 0
    let voiceDetectionCount = 0

    console.log('üé§ [WHISPER] üéôÔ∏è –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
    console.log('üé§ [WHISPER] ‚îú‚îÄ –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞:', dataArray.length)
    console.log('üé§ [WHISPER] ‚îú‚îÄ –ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏:', 20)
    console.log('üé§ [WHISPER] ‚îî‚îÄ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', minSilenceDuration, '–º—Å')

    const detectVoiceActivity = () => {
      if (!isRecording || !analyserRef.current) return

      analyserRef.current.getByteFrequencyData(dataArray)

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      let sum = 0
      for (let i = 0; i < dataArray.length; i++) {
        sum += dataArray[i]
      }
      const average = sum / dataArray.length
      voiceDetectionCount++

      const voiceThreshold = 20 // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏

      if (average > voiceThreshold) {
        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã
        if (silenceStartRef.current > 0) {
          const silenceDuration = Date.now() - silenceStartRef.current
          console.log('üé§ [WHISPER] üó£Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å –ø–æ—Å–ª–µ', silenceDuration, '–º—Å —Ç–∏—à–∏–Ω—ã')
        }
        silenceStartRef.current = 0

        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
        if (Date.now() - lastVoiceLog > 2000) {
          console.log('üé§ [WHISPER] üó£Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ—á—å | –ì—Ä–æ–º–∫–æ—Å—Ç—å:', Math.round(average))
          lastVoiceLog = Date.now()
        }
      } else {
        // –¢–∏—à–∏–Ω–∞
        if (silenceStartRef.current === 0) {
          silenceStartRef.current = Date.now()
          console.log('üé§ [WHISPER] ü§´ –ù–∞—á–∞–ª–æ —Ç–∏—à–∏–Ω—ã | –ì—Ä–æ–º–∫–æ—Å—Ç—å:', Math.round(average))
        } else if (Date.now() - silenceStartRef.current > minSilenceDuration) {
          // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∞—è –ø–∞—É–∑–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
          const silenceDuration = Date.now() - silenceStartRef.current
          console.log('üé§ [WHISPER] ‚è∏Ô∏è –î–û–õ–ì–ê–Ø –ü–ê–£–ó–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!')
          console.log('üé§ [WHISPER] ‚îú‚îÄ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã:', silenceDuration, '–º—Å')
          console.log('üé§ [WHISPER] ‚îú‚îÄ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...')
          
          if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
            console.log('üé§ [WHISPER] ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MediaRecorder')
            mediaRecorderRef.current.stop()
          }
          silenceStartRef.current = 0
        }
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      if (isRecording) {
        voiceActivityTimerRef.current = requestAnimationFrame(detectVoiceActivity)
      } else {
        console.log('üé§ [WHISPER] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
        console.log('üé§ [WHISPER] –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', voiceDetectionCount)
      }
    }

    detectVoiceActivity()
  }, [isRecording, minSilenceDuration])

  const startRecording = useCallback(async () => {
    console.log('üé§ [WHISPER] üé¨ –ù–ê–ß–ê–õ–û –ó–ê–ü–ò–°–ò...')
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      console.log('üé§ [WHISPER] üéôÔ∏è –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...')
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          sampleRate: 16000,
          channelCount: 1,
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      })

      console.log('üé§ [WHISPER] ‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω')
      console.log('üé§ [WHISPER] ‚îú‚îÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤:', stream.getAudioTracks().length)
      
      const audioTrack = stream.getAudioTracks()[0]
      if (audioTrack) {
        console.log('üé§ [WHISPER] ‚îú‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞:', audioTrack.getSettings())
        console.log('üé§ [WHISPER] ‚îî‚îÄ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:', audioTrack.getConstraints())
      }

      streamRef.current = stream

      // –°–æ–∑–¥–∞–µ–º AudioContext –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      console.log('üé§ [WHISPER] üîä –°–æ–∑–¥–∞–Ω–∏–µ AudioContext...')
      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()
      analyserRef.current = audioContextRef.current.createAnalyser()
      microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream)

      analyserRef.current.fftSize = 512
      analyserRef.current.smoothingTimeConstant = 0.3

      console.log('üé§ [WHISPER] ‚îú‚îÄ Sample rate:', audioContextRef.current.sampleRate, 'Hz')
      console.log('üé§ [WHISPER] ‚îú‚îÄ FFT size:', analyserRef.current.fftSize)
      console.log('üé§ [WHISPER] ‚îî‚îÄ Frequency bin count:', analyserRef.current.frequencyBinCount)

      microphoneRef.current.connect(analyserRef.current)

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MediaRecorder
      console.log('üé§ [WHISPER] üìº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MediaRecorder...')
      
      let mimeType = 'audio/webm;codecs=opus'
      if (!MediaRecorder.isTypeSupported(mimeType)) {
        mimeType = 'audio/webm'
        console.log('üé§ [WHISPER] ‚ö†Ô∏è Opus –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º', mimeType)
      }
      if (!MediaRecorder.isTypeSupported(mimeType)) {
        mimeType = 'audio/mp4'
        console.log('üé§ [WHISPER] ‚ö†Ô∏è WebM –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º', mimeType)
      }
      
      console.log('üé§ [WHISPER] ‚îú‚îÄ –ò—Ç–æ–≥–æ–≤—ã–π MIME type:', mimeType)

      mediaRecorderRef.current = new MediaRecorder(stream, { mimeType })
      audioChunksRef.current = []

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          console.log('üé§ [WHISPER] üì¶ –ü–æ–ª—É—á–µ–Ω chunk –∞—É–¥–∏–æ:', event.data.size, '–±–∞–π—Ç')
          audioChunksRef.current.push(event.data)
        } else {
          console.warn('üé§ [WHISPER] ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π chunk')
        }
      }

      mediaRecorderRef.current.onstop = async () => {
        console.log('üé§ [WHISPER] ‚èπÔ∏è MediaRecorder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        console.log('üé§ [WHISPER] ‚îú‚îÄ Chunks —Å–æ–±—Ä–∞–Ω–æ:', audioChunksRef.current.length)
        console.log('üé§ [WHISPER] ‚îú‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:', isProcessingRef.current)
        
        if (audioChunksRef.current.length > 0 && !isProcessingRef.current) {
          isProcessingRef.current = true
          console.log('üé§ [WHISPER] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...')
          
          try {
            const audioBlob = new Blob(audioChunksRef.current, { type: mimeType })
            console.log('üé§ [WHISPER] üì¶ –°–æ–∑–¥–∞–Ω blob:', audioBlob.size, '–±–∞–π—Ç,', audioBlob.type)
            await sendAudioForTranscription(audioBlob)
          } catch (error) {
            console.error('üé§ [WHISPER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error)
          } finally {
            isProcessingRef.current = false
            console.log('üé§ [WHISPER] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
          }
        }
        audioChunksRef.current = []

        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
        if (isRecording) {
          console.log('üé§ [WHISPER] üîÑ –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç —á–µ—Ä–µ–∑ 100–º—Å...')
          setTimeout(() => {
            if (isRecording && mediaRecorderRef.current && mediaRecorderRef.current.state === 'inactive') {
              console.log('üé§ [WHISPER] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å–∏')
              mediaRecorderRef.current.start()
            }
          }, 100)
        }
      }

      setIsRecording(true)
      console.log('üé§ [WHISPER] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ MediaRecorder...')
      mediaRecorderRef.current.start()
      
      console.log('üé§ [WHISPER] üéôÔ∏è –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...')
      startVoiceActivityDetection()

      console.log('üé§ [WHISPER] ‚úÖ –ó–ê–ü–ò–°–¨ –ò –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –£–°–ü–ï–®–ù–û –ù–ê–ß–ê–¢–´!')

    } catch (error) {
      console.error('üé§ [WHISPER] ‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ó–ê–ü–ò–°–ò:', error)
      console.error('üé§ [WHISPER] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      })
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É')
    }
  }, [sendAudioForTranscription, startVoiceActivityDetection])

  const stopRecording = useCallback(() => {
    console.log('üé§ [WHISPER] üõë –û–°–¢–ê–ù–û–í–ö–ê –ó–ê–ü–ò–°–ò...')
    
    setIsRecording(false)

    if (voiceActivityTimerRef.current) {
      console.log('üé§ [WHISPER] ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
      cancelAnimationFrame(voiceActivityTimerRef.current)
      voiceActivityTimerRef.current = null
    }

    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
      console.log('üé§ [WHISPER] ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MediaRecorder, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', mediaRecorderRef.current.state)
      mediaRecorderRef.current.stop()
    } else {
      console.log('üé§ [WHISPER] ‚ÑπÔ∏è MediaRecorder —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }

    if (streamRef.current) {
      const tracks = streamRef.current.getTracks()
      console.log('üé§ [WHISPER] üîá –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', tracks.length)
      tracks.forEach((track, index) => {
        console.log(`üé§ [WHISPER] ‚îú‚îÄ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–∞ ${index + 1}: ${track.kind}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, track.readyState)
        track.stop()
      })
      streamRef.current = null
    }

    if (audioContextRef.current) {
      console.log('üé§ [WHISPER] üîä –ó–∞–∫—Ä—ã—Ç–∏–µ AudioContext, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', audioContextRef.current.state)
      audioContextRef.current.close()
      audioContextRef.current = null
    }

    // –°–±—Ä–æ—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyserRef.current = null
    microphoneRef.current = null
    isProcessingRef.current = false
    audioChunksRef.current = []

    console.log('üé§ [WHISPER] ‚úÖ –ó–ê–ü–ò–°–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –û–°–¢–ê–ù–û–í–õ–ï–ù–ê –ò –†–ï–°–£–†–°–´ –û–°–í–û–ë–û–ñ–î–ï–ù–´')
  }, [])

  const clearTranscriptions = useCallback(() => {
    console.log('üé§ [WHISPER] üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π')
    console.log('üé§ [WHISPER] ‚îú‚îÄ –ë—ã–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π:', transcriptions.length)
    setTranscriptions([])
    console.log('üé§ [WHISPER] ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã')
  }, [transcriptions.length])

  // Ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (connectionStatus !== 'connected') {
      console.log('üé§ [WHISPER] üèì Ping –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
      return
    }

    console.log('üé§ [WHISPER] üèì –ó–∞–ø—É—Å–∫ ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
    
    const pingInterval = setInterval(() => {
      if (wsRef.current?.readyState === WebSocket.OPEN) {
        console.log('üé§ [WHISPER] üèì –û—Ç–ø—Ä–∞–≤–∫–∞ ping –Ω–∞ —Å–µ—Ä–≤–µ—Ä')
        wsRef.current.send(JSON.stringify({ type: 'ping' }))
      } else {
        console.warn('üé§ [WHISPER] ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ping - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ')
        console.warn('üé§ [WHISPER] –°–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket:', wsRef.current?.readyState)
      }
    }, 30000)

    return () => {
      console.log('üé§ [WHISPER] üèì –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ping –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞')
      clearInterval(pingInterval)
    }
  }, [connectionStatus])

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('üé§ [WHISPER] üßπ –†–ê–ó–ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–ê - –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...')
      console.log('üé§ [WHISPER] ‚îú‚îÄ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...')
      stopRecording()
      console.log('üé§ [WHISPER] ‚îú‚îÄ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...')  
      disconnect()
      console.log('üé§ [WHISPER] ‚úÖ –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    }
  }, [stopRecording, disconnect])

  return {
    connectionStatus,
    isRecording,
    transcriptions,
    connect,
    disconnect,
    startRecording,
    stopRecording,
    clearTranscriptions,
    error
  }
}

export default useWhisperWebSocket
