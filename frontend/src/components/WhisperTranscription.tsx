import { useState, useEffect } from 'react'
import { Mic, MicOff, Wifi, WifiOff, Trash2, Volume2 } from 'lucide-react'
import useWhisperWebSocket from '../hooks/useWhisperWebSocket'

interface WhisperTranscriptionProps {
  onTranscription?: (text: string) => void
  className?: string
}

const WhisperTranscription = ({ onTranscription, className = '' }: WhisperTranscriptionProps) => {
  const [autoSendToChat, setAutoSendToChat] = useState(false)
  
  const {
    connectionStatus,
    isRecording,
    transcriptions,
    connect,
    disconnect,
    startRecording,
    stopRecording,
    clearTranscriptions,
    error
  } = useWhisperWebSocket()

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  useEffect(() => {
    if (transcriptions.length > 0 && onTranscription && autoSendToChat) {
      const latestTranscription = transcriptions[0]
      console.log('üé§ [WHISPER-UI] üì§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç:')
      console.log('üé§ [WHISPER-UI] ‚îú‚îÄ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞:', autoSendToChat)
      console.log('üé§ [WHISPER-UI] ‚îú‚îÄ –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', `"${latestTranscription.text}"`)
      console.log('üé§ [WHISPER-UI] ‚îî‚îÄ –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ trim:', latestTranscription.text.trim().length)
      
      if (latestTranscription.text.trim()) {
        console.log('üé§ [WHISPER-UI] ‚úÖ –û–¢–ü–†–ê–í–ö–ê –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò –í –ß–ê–¢:', latestTranscription.text)
        onTranscription(latestTranscription.text)
      } else {
        console.log('üé§ [WHISPER-UI] ‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º')
      }
    } else {
      if (transcriptions.length > 0) {
        console.log('üé§ [WHISPER-UI] ‚ÑπÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞')
      }
    }
  }, [transcriptions, onTranscription, autoSendToChat])

  const toggleConnection = () => {
    if (connectionStatus === 'connected') {
      disconnect()
    } else {
      connect()
    }
  }

  const toggleRecording = () => {
    if (isRecording) {
      stopRecording()
    } else {
      startRecording()
    }
  }

  const getConnectionStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected':
        return <Wifi className="w-4 h-4 text-green-500" />
      case 'connecting':
        return <div className="w-4 h-4 border-2 border-yellow-500 border-t-transparent rounded-full animate-spin" />
      default:
        return <WifiOff className="w-4 h-4 text-red-500" />
    }
  }

  const getConnectionStatusText = () => {
    switch (connectionStatus) {
      case 'connected':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ'
      case 'connecting':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'
      case 'error':
        return '–û—à–∏–±–∫–∞'
      default:
        return '–û—Ç–∫–ª—é—á–µ–Ω–æ'
    }
  }

  return (
    <div className={`bg-background-secondary border border-white/10 rounded-xl p-4 ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <Volume2 className="w-5 h-5 text-primary-500" />
          <h3 className="text-lg font-medium text-white">Whisper –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
        </div>
        <div className="flex items-center space-x-2 text-sm text-text-muted">
          {getConnectionStatusIcon()}
          <span>{getConnectionStatusText()}</span>
        </div>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-3 mb-4">
          <p className="text-red-400 text-sm">{error}</p>
        </div>
      )}

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <button
            onClick={toggleConnection}
            className={`btn-secondary flex items-center space-x-2 ${
              connectionStatus === 'connected' ? 'bg-red-600 hover:bg-red-700' : ''
            }`}
          >
            {getConnectionStatusIcon()}
            <span>
              {connectionStatus === 'connected' ? '–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'}
            </span>
          </button>

          <button
            onClick={toggleRecording}
            disabled={connectionStatus !== 'connected'}
            className={`p-2 rounded-xl transition-all ${
              isRecording
                ? 'bg-red-600 text-white hover:bg-red-700 pulse-glow'
                : 'bg-primary-600 text-white hover:bg-primary-700'
            } disabled:opacity-50 disabled:cursor-not-allowed`}
          >
            {isRecording ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
          </button>
        </div>

        <button
          onClick={clearTranscriptions}
          className="p-2 text-text-muted hover:text-white hover:bg-background-tertiary rounded-xl transition-all"
          title="–û—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        >
          <Trash2 className="w-4 h-4" />
        </button>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <div className="flex items-center space-x-3 mb-4 p-3 bg-background-tertiary rounded-lg">
        <input
          type="checkbox"
          id="autoSendToChat"
          checked={autoSendToChat}
          onChange={(e) => setAutoSendToChat(e.target.checked)}
          className="w-4 h-4 text-primary-600 bg-background-secondary border-white/20 rounded focus:ring-primary-500"
        />
        <label htmlFor="autoSendToChat" className="text-sm text-white cursor-pointer">
          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç
        </label>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ */}
      {isRecording && (
        <div className="flex items-center space-x-2 mb-4 p-2 bg-red-900/20 border border-red-500/30 rounded-lg">
          <div className="w-3 h-3 bg-red-500 rounded-full recording-pulse"></div>
          <span className="text-red-400 text-sm font-medium">–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è...</span>
        </div>
      )}

      {/* –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π */}
      <div className="space-y-3 max-h-60 overflow-y-auto">
        <h4 className="text-sm font-medium text-white">–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π</h4>
        
        {transcriptions.length === 0 ? (
          <div className="text-center text-text-muted py-6">
            <Volume2 className="w-8 h-8 mx-auto mb-2 opacity-50" />
            <p className="text-sm">–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
            <p className="text-xs">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å</p>
          </div>
        ) : (
          <div className="space-y-2">
            {transcriptions.map((transcription, index) => (
              <div
                key={index}
                className="bg-background-tertiary border border-white/5 rounded-lg p-3 hover:border-white/10 transition-all"
              >
                <p className="text-white text-sm mb-2">{transcription.text}</p>
                <div className="flex items-center justify-between text-xs text-text-muted">
                  <span>–ö–ª–∏–µ–Ω—Ç: {transcription.client_id}</span>
                  <span>{new Date(transcription.timestamp).toLocaleTimeString()}</span>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div className="mt-4 p-3 bg-blue-900/20 border border-blue-500/30 rounded-lg">
        <p className="text-blue-200 text-xs">
          üí° Whisper –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—É–∑—ã –≤ —Ä–µ—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
          –í–∫–ª—é—á–∏—Ç–µ "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç" —á—Ç–æ–±—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ —á–∞—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.
        </p>
      </div>
    </div>
  )
}

export default WhisperTranscription
