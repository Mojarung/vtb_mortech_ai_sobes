import { useState, useEffect, useRef, useCallback } from 'react'
import { useParams } from 'react-router-dom'
import {
  Camera,
  Mic,
  MicOff,
  VideoOff,
  Phone,
  Clock,
  Users,
  MessageCircle,
  Volume2,
  AlertTriangle,
  Shield
} from 'lucide-react'
// @ts-ignore
import VideoSection from './VideoSection'
// @ts-ignore
import ChatSection from './ChatSection'
// @ts-ignore
import InterviewTimer from './InterviewTimer'
import WhisperTranscription from './WhisperTranscription'
import MediaPermissionHelper from './MediaPermissionHelper'
import WhisperDebugLog from './WhisperDebugLog'
import useWebSocket from '../hooks/useWebSocket'
import { formatTime } from '../utils/time'

interface InterviewData {
  id: number
  candidate_name: string
  position: string
  status: string
  started_at?: string
}

const InterviewRoom = () => {
  const { interviewId } = useParams<{ interviewId: string }>()
  const [interview, setInterview] = useState<InterviewData | null>(null)

  console.log('üé§ [INTERVIEW] üè† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è')
  console.log('üé§ [INTERVIEW] ‚îú‚îÄ ID –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ URL:', interviewId)
  console.log('üé§ [INTERVIEW] ‚îî‚îÄ Timestamp:', new Date().toISOString())
  const [isVideoOn, setIsVideoOn] = useState(true)
  const [isAudioOn, setIsAudioOn] = useState(true)
  const [interviewStarted, setInterviewStarted] = useState(false)
  const [startTime, setStartTime] = useState<Date | null>(null)
  const [showChat, setShowChat] = useState(false)
  const [showWhisper, setShowWhisper] = useState(false)
  const [connectionError, setConnectionError] = useState<string | null>(null)
  
  const videoRef = useRef<HTMLVideoElement>(null)
  const streamRef = useRef<MediaStream | null>(null)
  
  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
  const { 
    messages, 
    sendMessage, 
    connectionStatus, 
    error: wsError 
  } = useWebSocket(interview?.id || 0)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
  useEffect(() => {
    const loadInterview = async () => {
      if (!interviewId) return
      
      try {
        const response = await fetch(`http://localhost:8000/api/v1/interviews/${interviewId}`)
        if (response.ok) {
          const data = await response.json()
          setInterview(data)
          
          if (data.status === 'started' && data.started_at) {
            setInterviewStarted(true)
            setStartTime(new Date(data.started_at))
          }
        } else {
          setConnectionError('–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:', error)
        setConnectionError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
      }
    }
    
    loadInterview()
  }, [interviewId])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
  const [mediaError, setMediaError] = useState<string | null>(null)
  const [mediaPermissionDenied, setMediaPermissionDenied] = useState(false)
  const [showPermissionHelper, setShowPermissionHelper] = useState(false)

  const initCamera = async () => {
    try {
      setMediaError(null)
      setMediaPermissionDenied(false)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MediaDevices API
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('MediaDevices API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ')
      }

      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 1280 },
          height: { ideal: 720 },
          facingMode: 'user'
        },
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      })
      
      streamRef.current = stream
      if (videoRef.current) {
        videoRef.current.srcObject = stream
      }
      
      console.log('–ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã')
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error)
      
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'
      let isDenied = false
      
      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {
        errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –±—Ä–∞—É–∑–µ—Ä–µ.'
        isDenied = true
      } else if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {
        errorMessage = '–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.'
      } else if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {
        errorMessage = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É/–º–∏–∫—Ä–æ—Ñ–æ–Ω.'
      } else if (error.name === 'OverconstrainedError' || error.name === 'ConstraintNotSatisfiedError') {
        errorMessage = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º.'
      } else if (error.name === 'NotSupportedError') {
        errorMessage = 'HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.'
      } else if (error.message) {
        errorMessage = error.message
      }
      
      setMediaError(errorMessage)
      setMediaPermissionDenied(isDenied)
    }
  }

  useEffect(() => {
    initCamera()
    
    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop())
      }
    }
  }, [])

  const toggleVideo = useCallback(() => {
    if (streamRef.current) {
      const videoTrack = streamRef.current.getVideoTracks()[0]
      if (videoTrack) {
        videoTrack.enabled = !videoTrack.enabled
        setIsVideoOn(videoTrack.enabled)
      }
    }
  }, [])

  const toggleAudio = useCallback(() => {
    if (streamRef.current) {
      const audioTrack = streamRef.current.getAudioTracks()[0]
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled
        setIsAudioOn(audioTrack.enabled)
      }
    }
  }, [])

  const startInterview = async () => {
    if (!interview) return
    
    try {
      const response = await fetch(`http://localhost:8000/api/v1/interviews/${interview.id}/start`, {
        method: 'PATCH'
      })
      
      if (response.ok) {
        setInterviewStarted(true)
        setStartTime(new Date())
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é:', error)
    }
  }

  const endInterview = async () => {
    if (!interview) return
    
    try {
      const response = await fetch(`http://localhost:8000/api/v1/interviews/${interview.id}/finish`, {
        method: 'PATCH'
      })
      
      if (response.ok) {
        alert('–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:', error)
    }
  }

  const handleWhisperTranscription = useCallback((text: string) => {
    console.log('üé§ [INTERVIEW] üìù –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç:')
    console.log('üé§ [INTERVIEW] ‚îú‚îÄ –¢–µ–∫—Å—Ç:', `"${text}"`)
    console.log('üé§ [INTERVIEW] ‚îú‚îÄ –î–ª–∏–Ω–∞:', text.length)
    console.log('üé§ [INTERVIEW] ‚îî‚îÄ –ü–æ—Å–ª–µ trim:', text.trim().length)
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —á–∞—Ç –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if (text.trim()) {
      console.log('üé§ [INTERVIEW] ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í –ß–ê–¢ –û–¢ –ö–ê–ù–î–ò–î–ê–¢–ê:', text)
      sendMessage(text, 'candidate')
    } else {
      console.log('üé§ [INTERVIEW] ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç')
    }
  }, [sendMessage])

  if (connectionError) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="card max-w-md text-center">
          <h2 className="text-2xl font-bold text-red-400 mb-4">–û—à–∏–±–∫–∞</h2>
          <p className="text-text-muted">{connectionError}</p>
        </div>
      </div>
    )
  }

  // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
  if (mediaError && !interview) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="card max-w-2xl">
          <div className="text-center mb-6">
            <div className="w-16 h-16 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <Camera className="w-8 h-8 text-white" />
            </div>
            <h2 className="text-2xl font-bold text-red-400 mb-2">–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏</h2>
            <p className="text-text-muted text-lg">{mediaError}</p>
          </div>

          {mediaPermissionDenied && (
            <div className="bg-yellow-900/20 border border-yellow-500/30 rounded-xl p-4 mb-6">
              <h3 className="text-yellow-400 font-medium mb-2">üîß –ö–∞–∫ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø:</h3>
              <ol className="text-sm text-yellow-200 space-y-2 list-decimal list-inside">
                <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∑–∞–º–∫–∞/–∫–∞–º–µ—Ä—ã –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞</li>
                <li>–í—ã–±–µ—Ä–∏—Ç–µ "–†–∞–∑—Ä–µ—à–∏—Ç—å" –¥–ª—è –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</li>
                <li>–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"</li>
              </ol>
            </div>
          )}

          <div className="bg-blue-900/20 border border-blue-500/30 rounded-xl p-4 mb-6">
            <h3 className="text-blue-400 font-medium mb-2">üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</h3>
            <ul className="text-sm text-blue-200 space-y-1 list-disc list-inside">
              <li>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (Ctrl+F5 –∏–ª–∏ Cmd+Shift+R)</li>
              <li>–ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É (Zoom, Teams, Skype)</li>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±-–∫–∞–º–µ—Ä—ã</li>
              <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä (Chrome —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</li>
              <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç –ø–æ HTTPS (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)</li>
            </ul>
          </div>

          <div className="flex space-x-3">
            <button
              onClick={initCamera}
              className="btn-primary flex-1 flex items-center justify-center space-x-2"
            >
              <Camera className="w-4 h-4" />
              <span>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</span>
            </button>
            <button
              onClick={() => setShowPermissionHelper(true)}
              className="btn-secondary flex items-center space-x-2"
            >
              <Shield className="w-4 h-4" />
              <span>–°–ø—Ä–∞–≤–∫–∞</span>
            </button>
            <button
              onClick={() => {
                setMediaError(null)
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–∞–º–µ—Ä—ã
              }}
              className="btn-secondary flex-1"
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–º–µ—Ä—ã
            </button>
          </div>
        </div>
      </div>
    )
  }

  if (!interview) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500"></div>
      </div>
    )
  }

  return (
    <div className="h-screen bg-background flex flex-col overflow-hidden">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="bg-background-secondary border-b border-white/10 p-4 flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <div>
            <h1 className="text-xl font-semibold text-white">–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</h1>
            <p className="text-text-muted text-sm">
              {interview.candidate_name} ‚Ä¢ {interview.position}
            </p>
          </div>
          
          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –º–µ–¥–∏–∞ */}
          {mediaError && (
            <div className="bg-red-900/20 border border-red-500/30 rounded-lg px-3 py-2 flex items-center space-x-2">
              <AlertTriangle className="w-4 h-4 text-red-400" />
              <span className="text-red-200 text-sm">–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞–º–µ—Ä–æ–π/–º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º</span>
              <button
                onClick={() => setShowPermissionHelper(true)}
                className="text-red-400 hover:text-red-300 underline text-sm"
              >
                –°–ø—Ä–∞–≤–∫–∞
              </button>
              <button
                onClick={initCamera}
                className="text-red-400 hover:text-red-300 underline text-sm ml-2"
              >
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
              </button>
            </div>
          )}
        </div>
        
        <div className="flex items-center space-x-6">
          {/* –¢–∞–π–º–µ—Ä */}
          <div className="flex items-center space-x-2 text-text-muted">
            <Clock className="w-4 h-4" />
            <InterviewTimer 
              startTime={startTime}
              isRunning={interviewStarted}
            />
          </div>
          
          {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
          <div className="flex items-center space-x-2">
            <div className={`w-2 h-2 rounded-full ${
              connectionStatus === 'connected' ? 'bg-green-500' : 
              connectionStatus === 'connecting' ? 'bg-yellow-500' : 
              'bg-red-500'
            }`}></div>
            <span className="text-xs text-text-muted">
              {connectionStatus === 'connected' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 
               connectionStatus === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 
               '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </span>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ */}
          <button
            onClick={() => setShowChat(!showChat)}
            className={`p-2 rounded-xl transition-all ${
              showChat 
                ? 'bg-primary-600 text-white' 
                : 'bg-background-tertiary text-text-muted hover:text-white hover:bg-background-tertiary/80'
            }`}
          >
            <MessageCircle className="w-5 h-5" />
          </button>

          {/* –ö–Ω–æ–ø–∫–∞ Whisper */}
          <button
            onClick={() => setShowWhisper(!showWhisper)}
            className={`p-2 rounded-xl transition-all ${
              showWhisper 
                ? 'bg-green-600 text-white' 
                : 'bg-background-tertiary text-text-muted hover:text-white hover:bg-background-tertiary/80'
            }`}
            title="Whisper –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"
          >
            <Volume2 className="w-5 h-5" />
          </button>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex overflow-hidden">
        {/* –í–∏–¥–µ–æ —Å–µ–∫—Ü–∏—è */}
        <div className={`${
          showChat && showWhisper ? 'w-1/2' :
          showChat || showWhisper ? 'w-2/3' : 
          'w-full'
        } transition-all duration-300`}>
          <VideoSection
            videoRef={videoRef}
            isVideoOn={isVideoOn}
            isAudioOn={isAudioOn}
            interviewStarted={interviewStarted}
            mediaError={mediaError}
            onRetryCamera={initCamera}
          />
        </div>

        {/* –ß–∞—Ç —Å–µ–∫—Ü–∏—è */}
        {showChat && (
          <div className={`${
            showWhisper ? 'w-1/4' : 'w-1/3'
          } border-l border-white/10 bg-background-secondary transition-all duration-300`}>
            <ChatSection
              messages={messages}
              onSendMessage={sendMessage}
              interviewId={interview.id}
            />
          </div>
        )}

        {/* Whisper —Å–µ–∫—Ü–∏—è */}
        {showWhisper && (
          <div className={`${
            showChat ? 'w-1/4' : 'w-1/3'
          } border-l border-white/10 bg-background transition-all duration-300 overflow-y-auto`}>
            <div className="p-4">
              <WhisperTranscription
                onTranscription={handleWhisperTranscription}
                className="h-full"
              />
            </div>
          </div>
        )}
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <footer className="bg-background-secondary border-t border-white/10 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <Users className="w-4 h-4 text-text-muted" />
              <span className="text-sm text-text-muted">2 —É—á–∞—Å—Ç–Ω–∏–∫–∞</span>
            </div>
            
            {/* –°—Ç–∞—Ç—É—Å –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
            <div className="flex items-center space-x-2 text-xs">
              <div className={`flex items-center space-x-1 px-2 py-1 rounded ${
                mediaError 
                  ? 'bg-red-900/30 text-red-300' 
                  : 'bg-green-900/30 text-green-300'
              }`}>
                <Camera className="w-3 h-3" />
                <span>{mediaError ? '–û—à–∏–±–∫–∞' : '–û–ö'}</span>
              </div>
            </div>
          </div>
          
          <div className="flex items-center space-x-3">
            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ */}
            <button
              onClick={toggleVideo}
              className={`p-3 rounded-xl transition-all ${
                isVideoOn 
                  ? 'bg-background-tertiary text-white hover:bg-white/10' 
                  : 'bg-red-600 text-white hover:bg-red-700'
              }`}
            >
              {isVideoOn ? <Camera className="w-5 h-5" /> : <VideoOff className="w-5 h-5" />}
            </button>
            
            <button
              onClick={toggleAudio}
              className={`p-3 rounded-xl transition-all ${
                isAudioOn 
                  ? 'bg-background-tertiary text-white hover:bg-white/10' 
                  : 'bg-red-600 text-white hover:bg-red-700'
              }`}
            >
              {isAudioOn ? <Mic className="w-5 h-5" /> : <MicOff className="w-5 h-5" />}
            </button>
          </div>
          
          <div className="flex items-center space-x-3">
            {!interviewStarted ? (
              <button
                onClick={startInterview}
                className="btn-primary"
              >
                –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
              </button>
            ) : (
              <button
                onClick={endInterview}
                className="btn-danger flex items-center space-x-2"
              >
                <Phone className="w-4 h-4" />
                <span>–ó–∞–≤–µ—Ä—à–∏—Ç—å</span>
              </button>
            )}
          </div>
        </div>
      </footer>

      {/* –•–µ–ª–ø–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
      <MediaPermissionHelper
        show={showPermissionHelper}
        onClose={() => setShowPermissionHelper(false)}
      />

      {/* –î–µ–±–∞–≥ –ª–æ–≥ Whisper */}
      <WhisperDebugLog />
    </div>
  )
}

export default InterviewRoom
